#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct edge
{
    int p1, p2, cost;
}e[200002];
int f[10005],n, m, flag, mst;
int find(int x)
{
    if(x == f[x])
        return x;
    else
        return f[x] = find(f[x]);
}
bool cmp(edge a, edge b)
{
    return a.cost < b.cost;
}
void init()
{
    for(int i = 0; i <= m; i++)
        f[i] = i;
}
void MST()
{
    int j, i, cnt = 0, x, y, temp, ans, num[10005],k;
    init();
    for(mst = 0,i = 0; i < m; i++)
    {
        x = find(e[i].p1);
        y = find(e[i].p2);
        if(x != y)
        {
            f[x] = y;
            mst+= e[i].cost;
            num[cnt++] = i;
        }
	  }
    flag = 1;
    for(k = 0; k < cnt; k++)
    {
        init();
        ans = 0,temp = 0;
        for(i = 0; i < m; i++)
        {
            if(i == num[k])
                continue;
            x = find(e[i].p1);
            y = find(e[i].p2);
            if(x != y)
            {
                f[x] = y;
                ans+= e[i].cost;
                temp++;
            }
        }
        if(temp != cnt)
            continue;
        if(ans == mst)
        {
            flag = 0;
            return;
        }
    }
}
int main()
{
    int i,j,test;
    scanf("%d",&test);
    while(test--)
    {
        scanf("%d %d",&n, &m);
        for(i = 0; i < m; i++)
            scanf("%d %d %d",&e[i].p1, &e[i].p2, &e[i].cost);
        sort(e, e + m, cmp);
        MST();
        if(flag)
            printf("%d\n",mst);
        else
            printf("Not Unique!\n");
    }
}
