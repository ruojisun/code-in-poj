#include <algorithm>
#include <cstdio>
#define N 100500
using std::sort;
using std::unique;
using std::lower_bound;
struct cmt
{
	int l,r,Size;
}tr[N*30];
int t[N],tot,n,m,Size,a[N],b[N];
int build(int l,int r)
{
	int root=++tot;
	tr[root].Size=0;
	if(l==r) return root;
	int mid=(l+r)>>1;
	tr[root].l=build(l,mid);
	tr[root].r=build(mid+1,r);
	return root;
}
int update(int root,int x)
{
	int now=++tot;
	int tmp=now;
	tr[now].Size=tr[root].Size+1;
	for(int l=1,r=Size,mid;l<=r;)
	{
		mid=(l+r)>>1;
		if(x<=mid)
		{
			tr[now].l=++tot;
			tr[now].r=tr[root].r;
			root=tr[root].l;
			now=tot;
			r=mid-1;
		}
		else
		{
			tr[now].l=tr[root].l;
			tr[now].r=++tot;
			root=tr[root].r;
			now=tot;
			l=mid+1;
		}
		tr[now].Size=tr[root].Size+1;
	}
	return tmp;
}
int ask(int lx,int rx,int k)
{
	int l=1,r=Size;
	for(int mid;l<=r;)
	{
		mid=(l+r)>>1;
		if(tr[tr[rx].l].Size-tr[tr[lx].l].Size>=k)
		{
			lx=tr[lx].l;
			rx=tr[rx].l;
			r=mid-1;
		}
		else
		{
			k-=tr[tr[rx].l].Size-tr[tr[lx].l].Size;
			lx=tr[lx].r;
			rx=tr[rx].r;
			l=mid+1;
		}
	}
	return l;
}
int main()
{
	for(;scanf("%d%d",&n,&m)!=EOF;)
	{
		for(int i=1;i<=n;++i) scanf("%d",&a[i]),b[i]=a[i];
		sort(b+1,b+1+n);
		Size=unique(b+1,b+1+n)-b-1;
		for(int i=1;i<=n;++i) a[i]=lower_bound(b+1,b+1+Size,a[i])-b;
		t[0]=build(1,Size);
		for(int i=1;i<=n;++i)
		t[i]=update(t[i-1],a[i]);
		for(int x,y,k;m--;)
		{
			scanf("%d%d%d",&x,&y,&k);
			printf("%d\n",b[ask(t[x-1],t[y],k)]);
		}
		return 0;
	}
}
